{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @author Vandana Pareek\n * @version 0.0.1\n */\n\nimport { defineComponent } from \"vue\";\nimport axios from 'axios';\nexport default defineComponent({\n  components: {},\n  data() {\n    return {\n      items: [],\n      small_carpark: {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      },\n      med_carpark: {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      },\n      big_carpark: {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      },\n      large_carpark: {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      },\n      timer: null,\n      loading: false\n    };\n  },\n  mounted() {\n    //Retrieve car park data\n    this.getCarParkData();\n    this.timer = setInterval(() => {\n      this.resetData();\n      this.getCarParkData();\n    }, 60000);\n  },\n  methods: {\n    resetData() {\n      this.loading = true;\n      this.small_carpark = {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      };\n      this.med_carpark = {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      };\n      this.big_carpark = {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      };\n      this.large_carpark = {\n        minLot: 0,\n        minLotItems: [],\n        maxLot: 0,\n        maxLotItems: []\n      };\n    },\n    getCategory(total) {\n      switch (true) {\n        case total < 100:\n          return \"small\";\n        case total >= 100 && total < 300:\n          return \"med\";\n        case total >= 300 && total < 400:\n          return \"big\";\n        default:\n          return \"large\";\n      }\n    },\n    getCarParkData() {\n      axios.get(\"/transport/carpark-availability\").then(response => {\n        this.items = response.data.items[0].carpark_data;\n        this.items.forEach(function (val) {\n          var total = 0;\n          val.carpark_info.forEach(item => {\n            total += parseInt(item.lots_available);\n          });\n          let catname = this.getCategory(total);\n          this.setMinLot(this.$data[`${catname}_carpark`], total, val.carpark_number);\n          this.setMaxLot(this.$data[`${catname}_carpark`], total, val.carpark_number);\n        }.bind(this));\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => this.loading = false);\n    },\n    setMinLot(obj, total, carparkNum) {\n      if (obj.minLotItems.length == 0 || total == obj.minLot) {\n        obj.minLot = total;\n        obj.minLotItems.push(carparkNum);\n      } else if (total < obj.minLot) {\n        obj.minLot = total;\n        obj.minLotItems.length = [];\n        obj.minLotItems.push(carparkNum);\n      }\n    },\n    setMaxLot(obj, total, carparkNum) {\n      if (obj.maxLotItems.length == 0 || total == obj.maxLot) {\n        obj.maxLot = total;\n        obj.maxLotItems.push(carparkNum);\n      } else if (total > obj.maxLot) {\n        obj.maxLot = total;\n        obj.maxLotItems.length = [];\n        obj.maxLotItems.push(carparkNum);\n      }\n    },\n    getAllCarParkNumber(arr) {\n      return arr.join(\", \");\n    }\n  },\n  beforeUnmount() {\n    clearInterval(this.timer);\n  }\n});","map":{"version":3,"mappings":"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","names":["defineComponent","axios","components","data","items","small_carpark","minLot","minLotItems","maxLot","maxLotItems","med_carpark","big_carpark","large_carpark","timer","loading","mounted","getCarParkData","setInterval","resetData","methods","getCategory","total","get","then","response","carpark_data","forEach","val","carpark_info","item","parseInt","lots_available","catname","setMinLot","$data","carpark_number","setMaxLot","bind","catch","error","console","log","finally","obj","carparkNum","length","push","getAllCarParkNumber","arr","join","beforeUnmount","clearInterval"],"sourceRoot":"","sources":["/Users/vandana/car-park/src/components/ParkingLot.vue"],"sourcesContent":["<template>\n<div class=\"content\">\n     <div class=\"flex-container\">\n            <div v-if=\"loading\" id=\"loading\">\n                  <!-- here put a spinner or whatever you want to indicate that a request is in progress -->\n                  <img id=\"loading-image\" src=\"../assets/loading-gif.gif\" alt=\"Loading...\" />\n              </div>\n              <table id=\"tableComponent\" class=\"table table-bordered table-striped\">\n                  <thead>\n                    <tr>\n                      <th> \n                        Category\n                      </th>\n                      <th> \n                        Highest\n                      </th>\n                      <th> \n                        Lowest\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                      <!-- Get small car park data -->\n                      <tr>\n                      <td><b>SMALL</b></td>\n                      <td>\n                        <p style=\"color:red;\">({{small_carpark.maxLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(small_carpark.maxLotItems)}}\n                      </td>\n                      <td>\n                        <p style=\"color:red;\">({{small_carpark.minLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(small_carpark.minLotItems)}}\n                      </td>\n                    </tr>\n\n                    <!-- Get medium car park data -->\n                    <tr>\n                      <td><b>MEDIUM</b></td>\n                      <td>\n                        <p style=\"color:red;\">({{med_carpark.maxLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(med_carpark.maxLotItems)}}\n                      </td>\n                      <td>\n                        <p style=\"color:red;\">({{med_carpark.minLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(med_carpark.minLotItems)}}\n                      </td>\n                    </tr>\n\n                    <!-- Get big car park data -->\n                    <tr>\n                      <td><b>BIG</b></td>\n                      <td>\n                        <p style=\"color:red;\">({{big_carpark.maxLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(big_carpark.maxLotItems)}}\n                      </td>\n                      <td>\n                        <p style=\"color:red;\">({{big_carpark.minLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(big_carpark.minLotItems)}}\n                      </td>\n                    </tr>\n\n                    <!-- Get large car park data -->\n                    <tr>\n                      <td><b>LARGE</b></td>\n                      <td>\n                        <p style=\"color:red;\">({{large_carpark.maxLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(large_carpark.maxLotItems)}}\n                      </td>\n                      <td>\n                        <p style=\"color:red;\">({{large_carpark.minLot }} lots available)</p> <br/>\n                        {{this.getAllCarParkNumber(large_carpark.minLotItems)}}\n                      </td>\n                    </tr>\n                  </tbody>\n              </table> \n      </div>\n    </div>\n</template>\n\n<script>\n\n/**\n * @author Vandana Pareek\n * @version 0.0.1\n */\n\nimport { defineComponent } from \"vue\";\nimport axios from 'axios'\n\nexport default defineComponent({\n  components: { },\n  data() {\n      return {\n        items:[],\n        small_carpark:{minLot:0 ,minLotItems:[], maxLot:0, maxLotItems:[]},\n        med_carpark:{minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]},\n        big_carpark:{minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]},\n        large_carpark:{minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]},\n        timer: null,\n        loading: false\n      }\n   },\n   mounted() {\n     //Retrieve car park data\n     this.getCarParkData();\n      this.timer = setInterval(() => {\n        this.resetData();\n        this.getCarParkData();\n      }, 60000)\n    },\n    methods:{\n      resetData(){\n        this.loading = true;\n        this.small_carpark = {minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]};\n        this.med_carpark = {minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]};\n        this.big_carpark = {minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]};\n        this.large_carpark = {minLot:0, minLotItems:[], maxLot:0, maxLotItems:[]};\n      },\n      getCategory(total) {\n        switch (true) {\n         case total < 100:\n            return \"small\";\n         case total >=100 && total < 300:\n            return \"med\";\n         case total >=300 && total < 400:\n            return \"big\";\n         default:\n            return \"large\";\n        }\n      },\n      getCarParkData() {\n        axios.get(\"/transport/carpark-availability\").then(response => {\n            this.items = response.data.items[0].carpark_data;\n            this.items.forEach(function(val){\n                var total = 0;\n                val.carpark_info.forEach(item => {\n                    total += parseInt(item.lots_available);\n                });\n                let catname = this.getCategory(total);\n                this.setMinLot(this.$data[`${catname}_carpark`],total,val.carpark_number);\n                this.setMaxLot(this.$data[`${catname}_carpark`],total,val.carpark_number);\n            }.bind(this));\n        }).catch((error) => {\n        console.log(error);\n        }).finally(() => (this.loading = false))\n      },\n      setMinLot(obj, total, carparkNum) {\n        if (obj.minLotItems.length == 0 || total == obj.minLot) {\n          obj.minLot = total;\n          obj.minLotItems.push(carparkNum);\n        } else if (total < obj.minLot) {\n          obj.minLot = total;\n          obj.minLotItems.length = [];\n          obj.minLotItems.push(carparkNum);\n        }\n      },\n      setMaxLot(obj, total, carparkNum) {\n        if (obj.maxLotItems.length == 0 ||total == obj.maxLot) {\n          obj.maxLot = total;\n          obj.maxLotItems.push(carparkNum);\n        } else if (total > obj.maxLot) {\n          obj.maxLot = total;\n          obj.maxLotItems.length = [];\n          obj.maxLotItems.push(carparkNum);\n        } \n      },\n      getAllCarParkNumber(arr) {\n        return arr.join(\", \");\n      }\n    },\n    beforeUnmount() {\n      clearInterval(this.timer)\n    }\n});\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}